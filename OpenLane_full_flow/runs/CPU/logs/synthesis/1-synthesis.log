
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.50 (git sha1 b5170e139, clang++ 14.0.0-1ubuntu1.1 -fPIC -O3)
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /home/seaky/chip_design/open_pdks/sky130/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/synthesized.v
Parsing SystemVerilog input from `/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/synthesized.v' to AST representation.
Storing AST representation for module `$abstract\ALU_16bit'.
Storing AST representation for module `$abstract\AddSub'.
Storing AST representation for module `$abstract\CPU_16bit'.
Storing AST representation for module `$abstract\Control_Unit'.
Storing AST representation for module `$abstract\IR'.
Storing AST representation for module `$abstract\PC_2bit'.
Storing AST representation for module `$abstract\mux_8to1_16bit'.
Storing AST representation for module `$abstract\register_16bit'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v
Parsing SystemVerilog input from `/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v' to AST representation.
Storing AST representation for module `$abstract\register_16bitA'.
Storing AST representation for module `$abstract\register_16bitB'.
Storing AST representation for module `$abstract\register_16bit0'.
Storing AST representation for module `$abstract\register_16bit1'.
Storing AST representation for module `$abstract\register_16bit2'.
Storing AST representation for module `$abstract\register_16bit3'.
Storing AST representation for module `$abstract\register_16bit4'.
Storing AST representation for module `$abstract\register_16bit5'.
Storing AST representation for module `$abstract\register_16bit6'.
Storing AST representation for module `$abstract\register_16bit7'.
Storing AST representation for module `$abstract\PC_2bit1'.
Storing AST representation for module `$abstract\mux_8to1_16_bit'.
Storing AST representation for module `$abstract\IR_1'.
Storing AST representation for module `$abstract\CU'.
Storing AST representation for module `$abstract\AddSub_'.
Storing AST representation for module `$abstract\ALU_16bit_md'.
Storing AST representation for module `$abstract\CPU'.
Successfully finished Verilog frontend.

4. Executing HIERARCHY pass (managing design hierarchy).

5. Executing AST frontend in derive mode using pre-parsed AST for module `\CPU'.
Generating RTLIL representation for module `\CPU'.

5.1. Analyzing design hierarchy..
Top module:  \CPU

5.2. Executing AST frontend in derive mode using pre-parsed AST for module `\CU'.
Generating RTLIL representation for module `\CU'.

5.3. Executing AST frontend in derive mode using pre-parsed AST for module `\PC_2bit1'.
Generating RTLIL representation for module `\PC_2bit1'.

5.4. Executing AST frontend in derive mode using pre-parsed AST for module `\register_16bit7'.
Generating RTLIL representation for module `\register_16bit7'.

5.5. Executing AST frontend in derive mode using pre-parsed AST for module `\register_16bit6'.
Generating RTLIL representation for module `\register_16bit6'.

5.6. Executing AST frontend in derive mode using pre-parsed AST for module `\register_16bit5'.
Generating RTLIL representation for module `\register_16bit5'.

5.7. Executing AST frontend in derive mode using pre-parsed AST for module `\register_16bit4'.
Generating RTLIL representation for module `\register_16bit4'.

5.8. Executing AST frontend in derive mode using pre-parsed AST for module `\register_16bit3'.
Generating RTLIL representation for module `\register_16bit3'.

5.9. Executing AST frontend in derive mode using pre-parsed AST for module `\register_16bit2'.
Generating RTLIL representation for module `\register_16bit2'.

5.10. Executing AST frontend in derive mode using pre-parsed AST for module `\register_16bit1'.
Generating RTLIL representation for module `\register_16bit1'.

5.11. Executing AST frontend in derive mode using pre-parsed AST for module `\register_16bit0'.
Generating RTLIL representation for module `\register_16bit0'.

5.12. Executing AST frontend in derive mode using pre-parsed AST for module `\mux_8to1_16_bit'.
Generating RTLIL representation for module `\mux_8to1_16_bit'.

5.13. Executing AST frontend in derive mode using pre-parsed AST for module `\IR_1'.
Generating RTLIL representation for module `\IR_1'.

5.14. Executing AST frontend in derive mode using pre-parsed AST for module `\ALU_16bit_md'.
Generating RTLIL representation for module `\ALU_16bit_md'.

5.15. Analyzing design hierarchy..
Top module:  \CPU
Used module:     \CU
Used module:     \PC_2bit1
Used module:     \register_16bit7
Used module:     \register_16bit6
Used module:     \register_16bit5
Used module:     \register_16bit4
Used module:     \register_16bit3
Used module:     \register_16bit2
Used module:     \register_16bit1
Used module:     \register_16bit0
Used module:     \mux_8to1_16_bit
Used module:     \IR_1
Used module:     \ALU_16bit_md

5.16. Executing AST frontend in derive mode using pre-parsed AST for module `\register_16bitB'.
Generating RTLIL representation for module `\register_16bitB'.

5.17. Executing AST frontend in derive mode using pre-parsed AST for module `\AddSub_'.
Generating RTLIL representation for module `\AddSub_'.

5.18. Executing AST frontend in derive mode using pre-parsed AST for module `\register_16bitA'.
Generating RTLIL representation for module `\register_16bitA'.

5.19. Analyzing design hierarchy..
Top module:  \CPU
Used module:     \CU
Used module:     \PC_2bit1
Used module:     \register_16bit7
Used module:     \register_16bit6
Used module:     \register_16bit5
Used module:     \register_16bit4
Used module:     \register_16bit3
Used module:     \register_16bit2
Used module:     \register_16bit1
Used module:     \register_16bit0
Used module:     \mux_8to1_16_bit
Used module:     \IR_1
Used module:     \ALU_16bit_md
Used module:         \register_16bitB
Used module:         \AddSub_
Used module:         \register_16bitA

5.20. Analyzing design hierarchy..
Top module:  \CPU
Used module:     \CU
Used module:     \PC_2bit1
Used module:     \register_16bit7
Used module:     \register_16bit6
Used module:     \register_16bit5
Used module:     \register_16bit4
Used module:     \register_16bit3
Used module:     \register_16bit2
Used module:     \register_16bit1
Used module:     \register_16bit0
Used module:     \mux_8to1_16_bit
Used module:     \IR_1
Used module:     \ALU_16bit_md
Used module:         \register_16bitB
Used module:         \AddSub_
Used module:         \register_16bitA
Removing unused module `$abstract\CPU'.
Removing unused module `$abstract\ALU_16bit_md'.
Removing unused module `$abstract\AddSub_'.
Removing unused module `$abstract\CU'.
Removing unused module `$abstract\IR_1'.
Removing unused module `$abstract\mux_8to1_16_bit'.
Removing unused module `$abstract\PC_2bit1'.
Removing unused module `$abstract\register_16bit7'.
Removing unused module `$abstract\register_16bit6'.
Removing unused module `$abstract\register_16bit5'.
Removing unused module `$abstract\register_16bit4'.
Removing unused module `$abstract\register_16bit3'.
Removing unused module `$abstract\register_16bit2'.
Removing unused module `$abstract\register_16bit1'.
Removing unused module `$abstract\register_16bit0'.
Removing unused module `$abstract\register_16bitB'.
Removing unused module `$abstract\register_16bitA'.
Removing unused module `$abstract\register_16bit'.
Removing unused module `$abstract\mux_8to1_16bit'.
Removing unused module `$abstract\PC_2bit'.
Removing unused module `$abstract\IR'.
Removing unused module `$abstract\Control_Unit'.
Removing unused module `$abstract\CPU_16bit'.
Removing unused module `$abstract\AddSub'.
Removing unused module `$abstract\ALU_16bit'.
Removed 25 unused modules.

6. Generating Graphviz representation of design.
Writing dot description to `/home/seaky/chip_design/OpenLane/designs/CPU_16bit/runs/CPU/tmp/synthesis/hierarchy.dot'.
Dumping module CPU to page 1.
Renaming module CPU to CPU.

7. Executing TRIBUF pass.

8. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `CPU'. Setting top module to CPU.

8.1. Analyzing design hierarchy..
Top module:  \CPU
Used module:     \CU
Used module:     \PC_2bit1
Used module:     \register_16bit7
Used module:     \register_16bit6
Used module:     \register_16bit5
Used module:     \register_16bit4
Used module:     \register_16bit3
Used module:     \register_16bit2
Used module:     \register_16bit1
Used module:     \register_16bit0
Used module:     \mux_8to1_16_bit
Used module:     \IR_1
Used module:     \ALU_16bit_md
Used module:         \register_16bitB
Used module:         \AddSub_
Used module:         \register_16bitA

8.2. Analyzing design hierarchy..
Top module:  \CPU
Used module:     \CU
Used module:     \PC_2bit1
Used module:     \register_16bit7
Used module:     \register_16bit6
Used module:     \register_16bit5
Used module:     \register_16bit4
Used module:     \register_16bit3
Used module:     \register_16bit2
Used module:     \register_16bit1
Used module:     \register_16bit0
Used module:     \mux_8to1_16_bit
Used module:     \IR_1
Used module:     \ALU_16bit_md
Used module:         \register_16bitB
Used module:         \AddSub_
Used module:         \register_16bitA
Removed 0 unused modules.

9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

10. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:127$60 in module register_16bit3.
Marked 1 switch rules as full_case in process $proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:150$59 in module register_16bit4.
Marked 1 switch rules as full_case in process $proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:173$58 in module register_16bit5.
Marked 1 switch rules as full_case in process $proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:196$57 in module register_16bit6.
Marked 1 switch rules as full_case in process $proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:218$56 in module register_16bit7.
Marked 1 switch rules as full_case in process $proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:241$54 in module PC_2bit1.
Removed 5 dead cases from process $proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:396$5 in module CU.
Marked 9 switch rules as full_case in process $proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:396$5 in module CU.
Marked 1 switch rules as full_case in process $proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:104$61 in module register_16bit2.
Marked 1 switch rules as full_case in process $proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:13$70 in module register_16bitA.
Marked 1 switch rules as full_case in process $proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:35$66 in module register_16bitB.
Marked 1 switch rules as full_case in process $proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:321$65 in module IR_1.
Removed 1 dead cases from process $proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:286$64 in module mux_8to1_16_bit.
Marked 3 switch rules as full_case in process $proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:286$64 in module mux_8to1_16_bit.
Marked 1 switch rules as full_case in process $proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:58$63 in module register_16bit0.
Marked 1 switch rules as full_case in process $proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:81$62 in module register_16bit1.
Removed a total of 6 dead cases.

11. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 12 redundant assignments.
Promoted 20 assignments to connections.

12. Executing PROC_INIT pass (extract init attributes).

13. Executing PROC_ARST pass (detect async resets in processes).

14. Executing PROC_ROM pass (convert switches to ROMs).
Converted 4 switches.
<suppressed ~20 debug messages>

15. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\register_16bit3.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:127$60'.
     1/1: $0\Rout[15:0]
Creating decoders for process `\register_16bit4.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:150$59'.
     1/1: $0\Rout[15:0]
Creating decoders for process `\register_16bit5.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:173$58'.
     1/1: $0\Rout[15:0]
Creating decoders for process `\register_16bit6.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:196$57'.
     1/1: $0\Rout[15:0]
Creating decoders for process `\register_16bit7.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:218$56'.
     1/1: $0\Rout[15:0]
Creating decoders for process `\PC_2bit1.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:241$54'.
     1/1: $0\state[1:0]
Creating decoders for process `\CU.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:396$5'.
     1/80: $4\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:484$4.$result[7:0]$53
     2/80: $5\gin[0:0]
     3/80: $4\sub[0:0]
     4/80: $5\rout[2:0]
     5/80: $5\ain[0:0]
     6/80: $4\buswires[15:0]
     7/80: $5\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:449$3.$result[7:0]$47
     8/80: $5\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:441$2.$result[7:0]$46
     9/80: $5\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:432$1.$result[7:0]$45
    10/80: $4\done_CU[0:0]
    11/80: $4\din_enable_CU[0:0]
    12/80: $4\clear_CU[0:0]
    13/80: $4\rin_CU[7:0]
    14/80: $4\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:432$1.$result[7:0]$39
    15/80: $4\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:432$1.rx[2:0]$40
    16/80: $4\rout[2:0]
    17/80: $4\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:449$3.rx[2:0]$44
    18/80: $4\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:449$3.$result[7:0]$43
    19/80: $4\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:441$2.rx[2:0]$42
    20/80: $4\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:441$2.$result[7:0]$41
    21/80: $4\IRin_CU[0:0]
    22/80: $4\gin[0:0]
    23/80: $4\ain[0:0]
    24/80: $3\sub[0:0]
    25/80: $3\done_CU[0:0]
    26/80: $3\gout_CU[0:0]
    27/80: $3\gin[0:0]
    28/80: $3\ain[0:0]
    29/80: $3\din_enable_CU[0:0]
    30/80: $3\clear_CU[0:0]
    31/80: $3\IRin_CU[0:0]
    32/80: $3\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:484$4.rx[2:0]$38
    33/80: $3\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:484$4.$result[7:0]$37
    34/80: $3\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:449$3.rx[2:0]$36
    35/80: $3\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:449$3.$result[7:0]$35
    36/80: $3\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:441$2.rx[2:0]$34
    37/80: $3\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:441$2.$result[7:0]$33
    38/80: $3\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:432$1.rx[2:0]$32
    39/80: $3\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:432$1.$result[7:0]$31
    40/80: $3\rin_CU[7:0]
    41/80: $3\rout[2:0]
    42/80: $3\buswires[15:0]
    43/80: $2\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:484$4.rx[2:0]$30
    44/80: $2\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:484$4.$result[7:0]$29
    45/80: $2\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:449$3.rx[2:0]$28
    46/80: $2\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:449$3.$result[7:0]$27
    47/80: $2\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:441$2.rx[2:0]$26
    48/80: $2\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:441$2.$result[7:0]$25
    49/80: $2\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:432$1.rx[2:0]$24
    50/80: $2\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:432$1.$result[7:0]$23
    51/80: $2\done_CU[0:0]
    52/80: $2\clear_CU[0:0]
    53/80: $2\gout_CU[0:0]
    54/80: $2\din_enable_CU[0:0]
    55/80: $2\rin_CU[7:0]
    56/80: $2\IRin_CU[0:0]
    57/80: $2\gin[0:0]
    58/80: $2\sub[0:0]
    59/80: $2\ain[0:0]
    60/80: $2\rout[2:0]
    61/80: $2\buswires[15:0]
    62/80: $1\clear_CU[0:0]
    63/80: $1\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:484$4.rx[2:0]$22
    64/80: $1\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:484$4.$result[7:0]$21
    65/80: $1\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:449$3.rx[2:0]$20
    66/80: $1\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:449$3.$result[7:0]$19
    67/80: $1\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:441$2.rx[2:0]$18
    68/80: $1\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:441$2.$result[7:0]$17
    69/80: $1\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:432$1.rx[2:0]$16
    70/80: $1\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:432$1.$result[7:0]$15
    71/80: $1\done_CU[0:0]
    72/80: $1\gout_CU[0:0]
    73/80: $1\din_enable_CU[0:0]
    74/80: $1\rin_CU[7:0]
    75/80: $1\IRin_CU[0:0]
    76/80: $1\gin[0:0]
    77/80: $1\sub[0:0]
    78/80: $1\ain[0:0]
    79/80: $1\rout[2:0]
    80/80: $1\buswires[15:0]
Creating decoders for process `\register_16bit2.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:104$61'.
     1/1: $0\Rout[15:0]
Creating decoders for process `\register_16bitA.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:13$70'.
     1/1: $0\Rout[15:0]
Creating decoders for process `\register_16bitB.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:35$66'.
     1/1: $0\Rout[15:0]
Creating decoders for process `\IR_1.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:321$65'.
     1/1: $0\IR_out[8:0]
Creating decoders for process `\mux_8to1_16_bit.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:286$64'.
     1/3: $3\buswires_reg[15:0]
     2/3: $2\buswires_reg[15:0]
     3/3: $1\buswires_reg[15:0]
Creating decoders for process `\register_16bit0.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:58$63'.
     1/1: $0\Rout[15:0]
Creating decoders for process `\register_16bit1.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:81$62'.
     1/1: $0\Rout[15:0]

16. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\CU.\rout' from process `\CU.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:396$5'.
No latch inferred for signal `\CU.\ain' from process `\CU.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:396$5'.
No latch inferred for signal `\CU.\sub' from process `\CU.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:396$5'.
No latch inferred for signal `\CU.\gin' from process `\CU.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:396$5'.
No latch inferred for signal `\CU.\IRin_CU' from process `\CU.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:396$5'.
No latch inferred for signal `\CU.\rin_CU' from process `\CU.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:396$5'.
No latch inferred for signal `\CU.\din_enable_CU' from process `\CU.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:396$5'.
No latch inferred for signal `\CU.\gout_CU' from process `\CU.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:396$5'.
No latch inferred for signal `\CU.\clear_CU' from process `\CU.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:396$5'.
No latch inferred for signal `\CU.\done_CU' from process `\CU.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:396$5'.
No latch inferred for signal `\CU.\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:432$1.$result' from process `\CU.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:396$5'.
No latch inferred for signal `\CU.\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:432$1.rx' from process `\CU.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:396$5'.
No latch inferred for signal `\CU.\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:441$2.$result' from process `\CU.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:396$5'.
No latch inferred for signal `\CU.\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:441$2.rx' from process `\CU.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:396$5'.
No latch inferred for signal `\CU.\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:449$3.$result' from process `\CU.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:396$5'.
No latch inferred for signal `\CU.\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:449$3.rx' from process `\CU.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:396$5'.
No latch inferred for signal `\CU.\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:484$4.$result' from process `\CU.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:396$5'.
No latch inferred for signal `\CU.\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:484$4.rx' from process `\CU.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:396$5'.
Latch inferred for signal `\CU.\buswires' from process `\CU.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:396$5': $auto$proc_dlatch.cc:432:proc_dlatch$835
No latch inferred for signal `\mux_8to1_16_bit.\buswires_reg' from process `\mux_8to1_16_bit.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:286$64'.

17. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\register_16bit3.\Rout' using process `\register_16bit3.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:127$60'.
  created $dff cell `$procdff$930' with positive edge clock.
Creating register for signal `\register_16bit4.\Rout' using process `\register_16bit4.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:150$59'.
  created $dff cell `$procdff$931' with positive edge clock.
Creating register for signal `\register_16bit5.\Rout' using process `\register_16bit5.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:173$58'.
  created $dff cell `$procdff$932' with positive edge clock.
Creating register for signal `\register_16bit6.\Rout' using process `\register_16bit6.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:196$57'.
  created $dff cell `$procdff$933' with positive edge clock.
Creating register for signal `\register_16bit7.\Rout' using process `\register_16bit7.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:218$56'.
  created $dff cell `$procdff$934' with positive edge clock.
Creating register for signal `\PC_2bit1.\state' using process `\PC_2bit1.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:241$54'.
  created $dff cell `$procdff$935' with positive edge clock.
Creating register for signal `\register_16bit2.\Rout' using process `\register_16bit2.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:104$61'.
  created $dff cell `$procdff$936' with positive edge clock.
Creating register for signal `\register_16bitA.\Rout' using process `\register_16bitA.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:13$70'.
  created $dff cell `$procdff$937' with positive edge clock.
Creating register for signal `\register_16bitB.\Rout' using process `\register_16bitB.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:35$66'.
  created $dff cell `$procdff$938' with positive edge clock.
Creating register for signal `\IR_1.\IR_out' using process `\IR_1.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:321$65'.
  created $dff cell `$procdff$939' with positive edge clock.
Creating register for signal `\register_16bit0.\Rout' using process `\register_16bit0.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:58$63'.
  created $dff cell `$procdff$940' with positive edge clock.
Creating register for signal `\register_16bit1.\Rout' using process `\register_16bit1.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:81$62'.
  created $dff cell `$procdff$941' with positive edge clock.

18. Executing PROC_MEMWR pass (convert process memory writes to cells).

19. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\register_16bit3.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:127$60'.
Removing empty process `register_16bit3.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:127$60'.
Found and cleaned up 1 empty switch in `\register_16bit4.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:150$59'.
Removing empty process `register_16bit4.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:150$59'.
Found and cleaned up 1 empty switch in `\register_16bit5.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:173$58'.
Removing empty process `register_16bit5.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:173$58'.
Found and cleaned up 1 empty switch in `\register_16bit6.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:196$57'.
Removing empty process `register_16bit6.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:196$57'.
Found and cleaned up 1 empty switch in `\register_16bit7.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:218$56'.
Removing empty process `register_16bit7.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:218$56'.
Found and cleaned up 1 empty switch in `\PC_2bit1.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:241$54'.
Removing empty process `PC_2bit1.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:241$54'.
Found and cleaned up 9 empty switches in `\CU.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:396$5'.
Removing empty process `CU.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:396$5'.
Found and cleaned up 1 empty switch in `\register_16bit2.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:104$61'.
Removing empty process `register_16bit2.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:104$61'.
Found and cleaned up 1 empty switch in `\register_16bitA.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:13$70'.
Removing empty process `register_16bitA.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:13$70'.
Found and cleaned up 1 empty switch in `\register_16bitB.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:35$66'.
Removing empty process `register_16bitB.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:35$66'.
Found and cleaned up 1 empty switch in `\IR_1.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:321$65'.
Removing empty process `IR_1.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:321$65'.
Found and cleaned up 3 empty switches in `\mux_8to1_16_bit.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:286$64'.
Removing empty process `mux_8to1_16_bit.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:286$64'.
Found and cleaned up 1 empty switch in `\register_16bit0.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:58$63'.
Removing empty process `register_16bit0.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:58$63'.
Found and cleaned up 1 empty switch in `\register_16bit1.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:81$62'.
Removing empty process `register_16bit1.$proc$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:81$62'.
Cleaned up 24 empty switches.

20. Executing CHECK pass (checking for obvious problems).
Checking module CPU...
Checking module register_16bit3...
Checking module register_16bit4...
Checking module register_16bit5...
Checking module register_16bit6...
Checking module register_16bit7...
Checking module PC_2bit1...
Checking module CU...
Checking module register_16bit2...
Checking module register_16bitA...
Checking module AddSub_...
Checking module register_16bitB...
Checking module ALU_16bit_md...
Checking module IR_1...
Checking module mux_8to1_16_bit...
Checking module register_16bit0...
Checking module register_16bit1...
Found and reported 0 problems.

21. Executing OPT_EXPR pass (perform const folding).
Optimizing module CPU.
Optimizing module register_16bit3.
Optimizing module register_16bit4.
Optimizing module register_16bit5.
Optimizing module register_16bit6.
Optimizing module register_16bit7.
Optimizing module PC_2bit1.
Optimizing module CU.
<suppressed ~143 debug messages>
Optimizing module register_16bit2.
Optimizing module register_16bitA.
Optimizing module AddSub_.
Optimizing module register_16bitB.
Optimizing module ALU_16bit_md.
Optimizing module IR_1.
Optimizing module mux_8to1_16_bit.
<suppressed ~1 debug messages>
Optimizing module register_16bit0.
Optimizing module register_16bit1.

22. Executing FLATTEN pass (flatten design).
Deleting now unused module register_16bit3.
Deleting now unused module register_16bit4.
Deleting now unused module register_16bit5.
Deleting now unused module register_16bit6.
Deleting now unused module register_16bit7.
Deleting now unused module PC_2bit1.
Deleting now unused module CU.
Deleting now unused module register_16bit2.
Deleting now unused module register_16bitA.
Deleting now unused module AddSub_.
Deleting now unused module register_16bitB.
Deleting now unused module ALU_16bit_md.
Deleting now unused module IR_1.
Deleting now unused module mux_8to1_16_bit.
Deleting now unused module register_16bit0.
Deleting now unused module register_16bit1.
<suppressed ~16 debug messages>

23. Executing OPT_EXPR pass (perform const folding).
Optimizing module CPU.

24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CPU..
Removed 142 unused cells and 476 unused wires.
<suppressed ~144 debug messages>

25. Executing OPT pass (performing simple optimizations).

25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module CPU.

25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CPU'.
<suppressed ~225 debug messages>
Removed a total of 75 cells.

25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CPU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$243.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$251.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$253.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$256.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$107.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$266.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$268.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$271.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$109.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$112.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$119.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$311.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$313.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$316.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$379.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$121.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$381.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$384.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$393.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$124.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$395.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$398.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$238.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$131.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$406.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$408.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$411.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$133.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$136.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$419.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$422.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$143.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$145.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$148.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$430.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$433.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$154.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$156.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$159.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$441.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$444.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$178.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$452.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$455.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$180.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$182.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$185.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$463.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$466.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$193.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$195.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$474.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$477.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$197.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$200.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$209.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$485.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$488.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$211.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$213.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$216.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$496.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$499.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$240.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$595.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$598.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$224.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$226.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$229.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$606.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$609.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$674.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$680.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$686.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$692.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$698.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$704.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$710.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$716.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$722.
    dead port 2/2 on $mux $flatten\Control_unit_module.$procmux$728.
    dead port 1/2 on $mux $flatten\Mux.$procmux$815.
    dead port 1/2 on $mux $flatten\Mux.$procmux$818.
    dead port 1/2 on $mux $flatten\Mux.$procmux$824.
Removed 84 multiplexer ports.
<suppressed ~23 debug messages>

25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CPU.
    New ctrl vector for $pmux cell $flatten\Control_unit_module.$procmux$425: { $flatten\Control_unit_module.$procmux$181_CMP $auto$opt_reduce.cc:137:opt_pmux$959 $flatten\Control_unit_module.$procmux$108_CMP }
    New ctrl vector for $pmux cell $flatten\Control_unit_module.$procmux$480: { $flatten\Control_unit_module.$procmux$181_CMP $auto$opt_reduce.cc:137:opt_pmux$961 $flatten\Control_unit_module.$procmux$108_CMP }
    New ctrl vector for $pmux cell $flatten\Control_unit_module.$procmux$307: { $flatten\Control_unit_module.$procmux$210_CMP $auto$opt_reduce.cc:137:opt_pmux$963 }
    New ctrl vector for $pmux cell $flatten\Control_unit_module.$procmux$491: { $flatten\Control_unit_module.$procmux$418_CMP $auto$opt_reduce.cc:137:opt_pmux$965 }
    New ctrl vector for $pmux cell $flatten\Control_unit_module.$procmux$436: { $auto$opt_reduce.cc:137:opt_pmux$967 $flatten\Control_unit_module.$procmux$108_CMP }
    New ctrl vector for $pmux cell $flatten\Control_unit_module.$procmux$590: { $flatten\Control_unit_module.$procmux$181_CMP $auto$opt_reduce.cc:137:opt_pmux$969 $flatten\Control_unit_module.$procmux$108_CMP }
    New ctrl vector for $pmux cell $flatten\Control_unit_module.$procmux$447: { $flatten\Control_unit_module.$procmux$120_CMP $auto$opt_reduce.cc:137:opt_pmux$971 }
    New ctrl vector for $pmux cell $flatten\Control_unit_module.$procmux$458: { $flatten\Control_unit_module.$procmux$181_CMP $auto$opt_reduce.cc:137:opt_pmux$973 }
    New ctrl vector for $pmux cell $flatten\Control_unit_module.$procmux$414: { $flatten\Control_unit_module.$procmux$120_CMP $auto$opt_reduce.cc:137:opt_pmux$975 }
    New ctrl vector for $pmux cell $flatten\Control_unit_module.$procmux$469: { $flatten\Control_unit_module.$procmux$181_CMP $auto$opt_reduce.cc:137:opt_pmux$977 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:131:opt_pmux$962: { $flatten\Control_unit_module.$eq$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:465$48_Y $flatten\Control_unit_module.$eq$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:465$49_Y $flatten\Control_unit_module.$procmux$194_CMP }
  Optimizing cells in module \CPU.
Performed a total of 11 changes.

25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CPU'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

25.6. Executing OPT_DFF pass (perform DFF optimizations).

25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CPU..
Removed 0 unused cells and 159 unused wires.
<suppressed ~1 debug messages>

25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module CPU.

25.9. Rerunning OPT passes. (Maybe there is more to do..)

25.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CPU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

25.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CPU.
Performed a total of 0 changes.

25.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CPU'.
Removed a total of 0 cells.

25.13. Executing OPT_DFF pass (perform DFF optimizations).

25.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CPU..

25.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module CPU.

25.16. Finished OPT passes. (There is nothing left to do.)

26. Executing FSM pass (extract and optimize FSM).

26.1. Executing FSM_DETECT pass (finding FSMs in design).

26.2. Executing FSM_EXTRACT pass (extracting FSM from design).

26.3. Executing FSM_OPT pass (simple optimizations of FSMs).

26.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CPU..

26.5. Executing FSM_OPT pass (simple optimizations of FSMs).

26.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

26.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

26.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

27. Executing OPT pass (performing simple optimizations).

27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module CPU.

27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CPU'.
Removed a total of 0 cells.

27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CPU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CPU.
Performed a total of 0 changes.

27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CPU'.
Removed a total of 0 cells.

27.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\register7.$procdff$934 ($dff) from module CPU (D = \ALU_16bit.addsub.buswires_A, Q = \register7.Rout).
Adding EN signal on $flatten\register6.$procdff$933 ($dff) from module CPU (D = \ALU_16bit.addsub.buswires_A, Q = \register6.Rout).
Adding EN signal on $flatten\register5.$procdff$932 ($dff) from module CPU (D = \ALU_16bit.addsub.buswires_A, Q = \register5.Rout).
Adding EN signal on $flatten\register4.$procdff$931 ($dff) from module CPU (D = \ALU_16bit.addsub.buswires_A, Q = \register4.Rout).
Adding EN signal on $flatten\register3.$procdff$930 ($dff) from module CPU (D = \ALU_16bit.addsub.buswires_A, Q = \register3.Rout).
Adding EN signal on $flatten\register2.$procdff$936 ($dff) from module CPU (D = \ALU_16bit.addsub.buswires_A, Q = \register2.Rout).
Adding EN signal on $flatten\register1.$procdff$941 ($dff) from module CPU (D = \ALU_16bit.addsub.buswires_A, Q = \register1.Rout).
Adding EN signal on $flatten\register0.$procdff$940 ($dff) from module CPU (D = \ALU_16bit.addsub.buswires_A, Q = \register0.Rout).
Adding EN signal on $flatten\intr_reg.$procdff$939 ($dff) from module CPU (D = \din [8:0], Q = \intr_reg.IR_out).
Adding SRST signal on $flatten\counter_2bit.$procdff$935 ($dff) from module CPU (D = $flatten\counter_2bit.$add$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:247$55_Y, Q = \counter_2bit.state, rval = 2'00).
Adding EN signal on $flatten\ALU_16bit.\reg_g.$procdff$938 ($dff) from module CPU (D = \ALU_16bit.reg_g.buswires, Q = \ALU_16bit.reg_g.Rout).
Adding EN signal on $flatten\ALU_16bit.\reg_a.$procdff$937 ($dff) from module CPU (D = \ALU_16bit.addsub.buswires_A, Q = \ALU_16bit.reg_a.Rout).

27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CPU..
Removed 12 unused cells and 12 unused wires.
<suppressed ~13 debug messages>

27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module CPU.

27.9. Rerunning OPT passes. (Maybe there is more to do..)

27.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CPU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

27.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CPU.
Performed a total of 0 changes.

27.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CPU'.
Removed a total of 0 cells.

27.13. Executing OPT_DFF pass (perform DFF optimizations).

27.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CPU..

27.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module CPU.

27.16. Finished OPT passes. (There is nothing left to do.)

28. Executing WREDUCE pass (reducing word size of cells).
Removed top 29 address bits (of 32) from memory init port CPU.$flatten\Control_unit_module.$auto$mem.cc:328:emit$74 ($flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72).
Removed top 29 address bits (of 32) from memory init port CPU.$flatten\Control_unit_module.$auto$mem.cc:328:emit$78 ($flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76).
Removed top 29 address bits (of 32) from memory init port CPU.$flatten\Control_unit_module.$auto$mem.cc:328:emit$82 ($flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80).
Removed top 29 address bits (of 32) from memory init port CPU.$flatten\Control_unit_module.$auto$mem.cc:328:emit$86 ($flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84).
Removed top 2 bits (of 3) from port B of cell CPU.$flatten\Mux.$procmux$812_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell CPU.$flatten\Mux.$procmux$811_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell CPU.$flatten\Mux.$procmux$810_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell CPU.$flatten\Control_unit_module.$procmux$194_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell CPU.$flatten\Control_unit_module.$procmux$181_CMP0 ($eq).
Removed top 31 bits (of 32) from mux cell CPU.$flatten\Control_unit_module.$ternary$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:469$52 ($mux).
Removed top 1 bits (of 3) from port B of cell CPU.$flatten\Control_unit_module.$eq$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:465$49 ($eq).
Removed top 1 bits (of 3) from port B of cell CPU.$flatten\Control_unit_module.$eq$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:465$48 ($eq).
Removed top 31 bits (of 32) from wire CPU.$flatten\Control_unit_module.$ternary$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:469$52_Y.

29. Executing PEEPOPT pass (run peephole optimizers).

30. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CPU..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

31. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module CPU:
  creating $macc model for $flatten\ALU_16bit.\addsub.$add$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:535$68 ($add).
  creating $macc model for $flatten\ALU_16bit.\addsub.$add$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:535$69 ($add).
  creating $macc model for $flatten\counter_2bit.$add$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:247$55 ($add).
  merging $macc model for $flatten\ALU_16bit.\addsub.$add$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:535$68 into $flatten\ALU_16bit.\addsub.$add$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:535$69.
  creating $alu model for $macc $flatten\ALU_16bit.\addsub.$add$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:535$69.
  creating $alu model for $macc $flatten\counter_2bit.$add$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:247$55.
  creating $alu cell for $flatten\counter_2bit.$add$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:247$55: $auto$alumacc.cc:495:replace_alu$991
  creating $alu cell for $flatten\ALU_16bit.\addsub.$add$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:535$69: $auto$alumacc.cc:495:replace_alu$994
  created 2 $alu and 0 $macc cells.

32. Executing SHARE pass (SAT-based resource sharing).
Found 4 cells in module CPU that may be considered for resource sharing.
  Analyzing resource sharing options for $flatten\Control_unit_module.$auto$mem.cc:282:emit$85 ($memrd_v2):
    Found 1 activation_patterns using ctrl signal { $flatten\Control_unit_module.$procmux$108_CMP \resetn \run }.
    No candidates found.
  Analyzing resource sharing options for $flatten\Control_unit_module.$auto$mem.cc:282:emit$81 ($memrd_v2):
    Found 1 activation_patterns using ctrl signal { $flatten\Control_unit_module.$procmux$179_CTRL $flatten\Control_unit_module.$procmux$181_CMP \resetn \run }.
    No candidates found.
  Analyzing resource sharing options for $flatten\Control_unit_module.$auto$mem.cc:282:emit$77 ($memrd_v2):
    Found 1 activation_patterns using ctrl signal { $flatten\Control_unit_module.$procmux$181_CMP $flatten\Control_unit_module.$procmux$194_CMP \resetn \run }.
    No candidates found.
  Analyzing resource sharing options for $flatten\Control_unit_module.$auto$mem.cc:282:emit$73 ($memrd_v2):
    Found 1 activation_patterns using ctrl signal { $flatten\Control_unit_module.$procmux$181_CMP $flatten\Control_unit_module.$procmux$210_CMP \resetn \run }.
    No candidates found.

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module CPU.

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CPU'.
Removed a total of 0 cells.

33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CPU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CPU.
Performed a total of 0 changes.

33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CPU'.
Removed a total of 0 cells.

33.6. Executing OPT_DFF pass (perform DFF optimizations).

33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CPU..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module CPU.

33.9. Rerunning OPT passes. (Maybe there is more to do..)

33.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CPU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

33.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CPU.
Performed a total of 0 changes.

33.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CPU'.
Removed a total of 0 cells.

33.13. Executing OPT_DFF pass (perform DFF optimizations).

33.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CPU..

33.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module CPU.

33.16. Finished OPT passes. (There is nothing left to do.)

34. Executing MEMORY pass.

34.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

34.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

34.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

34.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

34.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72'[0] in module `\CPU': no output FF found.
Checking read port `$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76'[0] in module `\CPU': no output FF found.
Checking read port `$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80'[0] in module `\CPU': no output FF found.
Checking read port `$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84'[0] in module `\CPU': no output FF found.
Checking read port address `$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72'[0] in module `\CPU': merged address FF to cell.
Checking read port address `$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76'[0] in module `\CPU': merged address FF to cell.
Checking read port address `$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80'[0] in module `\CPU': merged address FF to cell.
Checking read port address `$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84'[0] in module `\CPU': merged address FF to cell.

34.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CPU..

34.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

34.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

34.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CPU..

34.10. Executing MEMORY_COLLECT pass (generating $mem cells).

35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CPU..

36. Executing OPT pass (performing simple optimizations).

36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module CPU.
<suppressed ~31 debug messages>

36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CPU'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

36.3. Executing OPT_DFF pass (perform DFF optimizations).

36.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CPU..
Removed 2 unused cells and 10 unused wires.
<suppressed ~3 debug messages>

36.5. Finished fast OPT passes.

37. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory $flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72 in module \CPU:
  created 8 $dff cells and 0 static cells of width 8.
Extracted data FF from read port 0 of CPU.$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72: $$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdreg[0]
  read interface: 1 $dff and 7 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory $flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76 in module \CPU:
  created 8 $dff cells and 0 static cells of width 8.
Extracted data FF from read port 0 of CPU.$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76: $$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdreg[0]
  read interface: 1 $dff and 7 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory $flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80 in module \CPU:
  created 8 $dff cells and 0 static cells of width 8.
Extracted data FF from read port 0 of CPU.$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80: $$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdreg[0]
  read interface: 1 $dff and 7 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory $flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84 in module \CPU:
  created 8 $dff cells and 0 static cells of width 8.
Extracted data FF from read port 0 of CPU.$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84: $$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdreg[0]
  read interface: 1 $dff and 7 $mux cells.
  write interface: 0 write mux blocks.

38. Executing OPT pass (performing simple optimizations).

38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module CPU.

38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CPU'.
Removed a total of 0 cells.

38.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CPU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

38.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CPU.
    Consolidated identical input bits for $mux cell $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][2][2]$1091:
      Old ports: A=8'00010000, B=8'00100000, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][1][1]$a$1083
      New ports: A=2'01, B=2'10, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][1][1]$a$1083 [5:4]
      New connections: { $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][1][1]$a$1083 [7:6] $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][1][1]$a$1083 [3:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][2][1]$1088:
      Old ports: A=8'00000100, B=8'00001000, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][1][0]$b$1081
      New ports: A=2'01, B=2'10, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][1][0]$b$1081 [3:2]
      New connections: { $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][1][0]$b$1081 [7:4] $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][1][0]$b$1081 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][2][0]$1085:
      Old ports: A=8'00000001, B=8'00000010, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][1][0]$a$1080
      New ports: A=2'01, B=2'10, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][1][0]$a$1080 [1:0]
      New connections: $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][1][0]$a$1080 [7:2] = 6'000000
    Consolidated identical input bits for $mux cell $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][2][2]$1070:
      Old ports: A=8'00010000, B=8'00100000, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][1][1]$a$1062
      New ports: A=2'01, B=2'10, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][1][1]$a$1062 [5:4]
      New connections: { $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][1][1]$a$1062 [7:6] $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][1][1]$a$1062 [3:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][2][1]$1067:
      Old ports: A=8'00000100, B=8'00001000, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][1][0]$b$1060
      New ports: A=2'01, B=2'10, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][1][0]$b$1060 [3:2]
      New connections: { $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][1][0]$b$1060 [7:4] $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][1][0]$b$1060 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][2][0]$1064:
      Old ports: A=8'00000001, B=8'00000010, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][1][0]$a$1059
      New ports: A=2'01, B=2'10, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][1][0]$a$1059 [1:0]
      New connections: $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][1][0]$a$1059 [7:2] = 6'000000
    Consolidated identical input bits for $mux cell $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][2][2]$1049:
      Old ports: A=8'00010000, B=8'00100000, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][1][1]$a$1041
      New ports: A=2'01, B=2'10, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][1][1]$a$1041 [5:4]
      New connections: { $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][1][1]$a$1041 [7:6] $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][1][1]$a$1041 [3:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][2][1]$1046:
      Old ports: A=8'00000100, B=8'00001000, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][1][0]$b$1039
      New ports: A=2'01, B=2'10, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][1][0]$b$1039 [3:2]
      New connections: { $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][1][0]$b$1039 [7:4] $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][1][0]$b$1039 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][2][0]$1043:
      Old ports: A=8'00000001, B=8'00000010, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][1][0]$a$1038
      New ports: A=2'01, B=2'10, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][1][0]$a$1038 [1:0]
      New connections: $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][1][0]$a$1038 [7:2] = 6'000000
    Consolidated identical input bits for $mux cell $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][2][2]$1028:
      Old ports: A=8'00010000, B=8'00100000, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][1][1]$a$1020
      New ports: A=2'01, B=2'10, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][1][1]$a$1020 [5:4]
      New connections: { $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][1][1]$a$1020 [7:6] $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][1][1]$a$1020 [3:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][2][1]$1025:
      Old ports: A=8'00000100, B=8'00001000, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][1][0]$b$1018
      New ports: A=2'01, B=2'10, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][1][0]$b$1018 [3:2]
      New connections: { $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][1][0]$b$1018 [7:4] $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][1][0]$b$1018 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][2][0]$1022:
      Old ports: A=8'00000001, B=8'00000010, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][1][0]$a$1017
      New ports: A=2'01, B=2'10, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][1][0]$a$1017 [1:0]
      New connections: $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][1][0]$a$1017 [7:2] = 6'000000
    Consolidated identical input bits for $mux cell $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][2][3]$1031:
      Old ports: A=8'01000000, B=8'10000000, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][1][1]$b$1021
      New ports: A=2'01, B=2'10, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][1][1]$b$1021 [7:6]
      New connections: $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][1][1]$b$1021 [5:0] = 6'000000
    Consolidated identical input bits for $mux cell $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][2][3]$1052:
      Old ports: A=8'01000000, B=8'10000000, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][1][1]$b$1042
      New ports: A=2'01, B=2'10, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][1][1]$b$1042 [7:6]
      New connections: $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][1][1]$b$1042 [5:0] = 6'000000
    Consolidated identical input bits for $mux cell $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][2][3]$1073:
      Old ports: A=8'01000000, B=8'10000000, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][1][1]$b$1063
      New ports: A=2'01, B=2'10, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][1][1]$b$1063 [7:6]
      New connections: $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][1][1]$b$1063 [5:0] = 6'000000
    Consolidated identical input bits for $mux cell $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][2][3]$1094:
      Old ports: A=8'01000000, B=8'10000000, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][1][1]$b$1084
      New ports: A=2'01, B=2'10, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][1][1]$b$1084 [7:6]
      New connections: $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][1][1]$b$1084 [5:0] = 6'000000
  Optimizing cells in module \CPU.
    Consolidated identical input bits for $mux cell $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][1][1]$1082:
      Old ports: A=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][1][1]$a$1083, B=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][1][1]$b$1084, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][0][0]$b$1078
      New ports: A={ 2'00 $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][1][1]$a$1083 [5:4] }, B={ $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][1][1]$b$1084 [7:6] 2'00 }, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][0][0]$b$1078 [7:4]
      New connections: $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][0][0]$b$1078 [3:0] = 4'0000
    Consolidated identical input bits for $mux cell $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][1][0]$1079:
      Old ports: A=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][1][0]$a$1080, B=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][1][0]$b$1081, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][0][0]$a$1077
      New ports: A={ 2'00 $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][1][0]$a$1080 [1:0] }, B={ $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][1][0]$b$1081 [3:2] 2'00 }, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][0][0]$a$1077 [3:0]
      New connections: $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$84$rdmux[0][0][0]$a$1077 [7:4] = 4'0000
    Consolidated identical input bits for $mux cell $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][1][1]$1061:
      Old ports: A=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][1][1]$a$1062, B=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][1][1]$b$1063, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][0][0]$b$1057
      New ports: A={ 2'00 $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][1][1]$a$1062 [5:4] }, B={ $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][1][1]$b$1063 [7:6] 2'00 }, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][0][0]$b$1057 [7:4]
      New connections: $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][0][0]$b$1057 [3:0] = 4'0000
    Consolidated identical input bits for $mux cell $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][1][0]$1058:
      Old ports: A=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][1][0]$a$1059, B=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][1][0]$b$1060, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][0][0]$a$1056
      New ports: A={ 2'00 $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][1][0]$a$1059 [1:0] }, B={ $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][1][0]$b$1060 [3:2] 2'00 }, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][0][0]$a$1056 [3:0]
      New connections: $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$80$rdmux[0][0][0]$a$1056 [7:4] = 4'0000
    Consolidated identical input bits for $mux cell $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][1][1]$1040:
      Old ports: A=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][1][1]$a$1041, B=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][1][1]$b$1042, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][0][0]$b$1036
      New ports: A={ 2'00 $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][1][1]$a$1041 [5:4] }, B={ $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][1][1]$b$1042 [7:6] 2'00 }, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][0][0]$b$1036 [7:4]
      New connections: $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][0][0]$b$1036 [3:0] = 4'0000
    Consolidated identical input bits for $mux cell $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][1][0]$1037:
      Old ports: A=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][1][0]$a$1038, B=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][1][0]$b$1039, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][0][0]$a$1035
      New ports: A={ 2'00 $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][1][0]$a$1038 [1:0] }, B={ $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][1][0]$b$1039 [3:2] 2'00 }, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][0][0]$a$1035 [3:0]
      New connections: $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdmux[0][0][0]$a$1035 [7:4] = 4'0000
    Consolidated identical input bits for $mux cell $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][1][1]$1019:
      Old ports: A=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][1][1]$a$1020, B=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][1][1]$b$1021, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][0][0]$b$1015
      New ports: A={ 2'00 $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][1][1]$a$1020 [5:4] }, B={ $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][1][1]$b$1021 [7:6] 2'00 }, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][0][0]$b$1015 [7:4]
      New connections: $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][0][0]$b$1015 [3:0] = 4'0000
    Consolidated identical input bits for $mux cell $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][1][0]$1016:
      Old ports: A=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][1][0]$a$1017, B=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][1][0]$b$1018, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][0][0]$a$1014
      New ports: A={ 2'00 $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][1][0]$a$1017 [1:0] }, B={ $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][1][0]$b$1018 [3:2] 2'00 }, Y=$memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][0][0]$a$1014 [3:0]
      New connections: $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][0][0]$a$1014 [7:4] = 4'0000
  Optimizing cells in module \CPU.
Performed a total of 24 changes.

38.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CPU'.
<suppressed ~84 debug messages>
Removed a total of 28 cells.

38.6. Executing OPT_SHARE pass.

38.7. Executing OPT_DFF pass (perform DFF optimizations).

38.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CPU..
Removed 0 unused cells and 60 unused wires.
<suppressed ~1 debug messages>

38.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module CPU.

38.10. Rerunning OPT passes. (Maybe there is more to do..)

38.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CPU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

38.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CPU.
    New ctrl vector for $pmux cell $flatten\Control_unit_module.$procmux$262: $auto$opt_reduce.cc:137:opt_pmux$1098
    New input vector for $reduce_or cell $auto$opt_reduce.cc:131:opt_pmux$1097: { $flatten\Control_unit_module.$4\din_enable_CU[0:0] $flatten\Control_unit_module.$eq$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:465$48_Y $flatten\Control_unit_module.$procmux$210_CMP $auto$wreduce.cc:513:run$990 [0] }
  Optimizing cells in module \CPU.
Performed a total of 2 changes.

38.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CPU'.
Removed a total of 0 cells.

38.14. Executing OPT_SHARE pass.

38.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdreg[0] ($dff) from module CPU (D = $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][0][0]$a$1014 [3:0], Q = $flatten\Control_unit_module.$4\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:484$4.$result[7:0]$53 [7:4], rval = 4'0000).
Adding SRST signal on $$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$76$rdreg[0] ($dff) from module CPU (D = $memory$flatten\Control_unit_module.$auto$proc_rom.cc:155:do_switch$72$rdmux[0][0][0]$a$1014 [3:0], Q = $flatten\Control_unit_module.$4\rin_mux$func$/home/seaky/chip_design/OpenLane/designs/CPU_16bit/src/CPU.v:484$4.$result[7:0]$53 [3:0], rval = 4'0000).

38.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CPU..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

38.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module CPU.

38.18. Rerunning OPT passes. (Maybe there is more to do..)

38.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CPU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

38.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CPU.
Performed a total of 0 changes.

38.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CPU'.
Removed a total of 0 cells.

38.22. Executing OPT_SHARE pass.

38.23. Executing OPT_DFF pass (perform DFF optimizations).

38.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CPU..

38.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module CPU.

38.26. Finished OPT passes. (There is nothing left to do.)

39. Executing TECHMAP pass (map to technology primitives).

39.1. Executing Verilog-2005 frontend: /home/seaky/chip_design/OpenROAD-flow-scripts/tools/install/yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/seaky/chip_design/OpenROAD-flow-scripts/tools/install/yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

39.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$504d7726e493b7d5a8a8ac16f387eb0143f8a853\_90_pmux for cells of type $pmux.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using template $paramod$32e7c4d6f92ff4337599ece53082d2e88a82a9f2\_90_pmux for cells of type $pmux.
Using template $paramod$85df5dc01c7df96a7d8e5f1fdf76ce9ac452af63\_90_pmux for cells of type $pmux.
Using template $paramod$fc16b9f758000d363d24f130038bd99b46b4fa1b\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $not.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~625 debug messages>

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module CPU.
<suppressed ~84 debug messages>

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CPU'.
<suppressed ~72 debug messages>
Removed a total of 24 cells.

40.3. Executing OPT_DFF pass (perform DFF optimizations).

40.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CPU..
Removed 29 unused cells and 268 unused wires.
<suppressed ~30 debug messages>

40.5. Finished fast OPT passes.

41. Executing ABC pass (technology mapping using ABC).

41.1. Extracting gate netlist of module `\CPU' to `<abc-temp-dir>/input.blif'..
Extracted 550 gates and 749 wires to a netlist network with 197 inputs and 52 outputs.

41.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

41.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        4
ABC RESULTS:            ANDNOT cells:      232
ABC RESULTS:               MUX cells:       61
ABC RESULTS:              NAND cells:       15
ABC RESULTS:               NOR cells:       18
ABC RESULTS:               NOT cells:       71
ABC RESULTS:                OR cells:      105
ABC RESULTS:             ORNOT cells:       35
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               XOR cells:       43
ABC RESULTS:        internal signals:      500
ABC RESULTS:           input signals:      197
ABC RESULTS:          output signals:       52
Removing temp directory.

42. Executing OPT pass (performing simple optimizations).

42.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module CPU.

42.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CPU'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

42.3. Executing OPT_DFF pass (perform DFF optimizations).

42.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CPU..
Removed 0 unused cells and 427 unused wires.
<suppressed ~18 debug messages>

42.5. Finished fast OPT passes.

43. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `CPU'. Setting top module to CPU.

43.1. Analyzing design hierarchy..
Top module:  \CPU

43.2. Analyzing design hierarchy..
Top module:  \CPU
Removed 0 unused modules.

44. Printing statistics.

=== CPU ===

   Number of wires:                653
   Number of wire bits:           1497
   Number of public wires:         112
   Number of public wire bits:     939
   Number of ports:                  6
   Number of port bits:             36
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                780
     $_ANDNOT_                     231
     $_AND_                          4
     $_DFFE_PP_                    169
     $_MUX_                         61
     $_NAND_                        15
     $_NOR_                         18
     $_NOT_                         71
     $_ORNOT_                       35
     $_OR_                         104
     $_SDFF_PN0_                     4
     $_SDFF_PP0_                     6
     $_XNOR_                         3
     $_XOR_                         43
     $scopeinfo                     16

45. Executing CHECK pass (checking for obvious problems).
Checking module CPU...
Found and reported 0 problems.

46. Generating Graphviz representation of design.
Writing dot description to `/home/seaky/chip_design/OpenLane/designs/CPU_16bit/runs/CPU/tmp/synthesis/post_techmap.dot'.
Dumping module CPU to page 1.

47. Executing SHARE pass (SAT-based resource sharing).

48. Executing OPT pass (performing simple optimizations).

48.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module CPU.

48.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CPU'.
Removed a total of 0 cells.

48.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \CPU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

48.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \CPU.
Performed a total of 0 changes.

48.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\CPU'.
Removed a total of 0 cells.

48.6. Executing OPT_DFF pass (perform DFF optimizations).

48.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CPU..

48.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module CPU.

48.9. Finished OPT passes. (There is nothing left to do.)

49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CPU..
Removed 16 unused cells and 81 unused wires.
<suppressed ~97 debug messages>

50. Printing statistics.

=== CPU ===

   Number of wires:                572
   Number of wire bits:            793
   Number of public wires:          31
   Number of public wire bits:     235
   Number of ports:                  6
   Number of port bits:             36
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                764
     $_ANDNOT_                     231
     $_AND_                          4
     $_DFFE_PP_                    169
     $_MUX_                         61
     $_NAND_                        15
     $_NOR_                         18
     $_NOT_                         71
     $_ORNOT_                       35
     $_OR_                         104
     $_SDFF_PN0_                     4
     $_SDFF_PP0_                     6
     $_XNOR_                         3
     $_XOR_                         43

mapping tbuf

51. Executing TECHMAP pass (map to technology primitives).

51.1. Executing Verilog-2005 frontend: /home/seaky/chip_design/open_pdks/sky130/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/seaky/chip_design/open_pdks/sky130/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

51.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

52. Executing SIMPLEMAP pass (map simple cells to gate primitives).

53. Executing TECHMAP pass (map to technology primitives).

53.1. Executing Verilog-2005 frontend: /home/seaky/chip_design/open_pdks/sky130/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/seaky/chip_design/open_pdks/sky130/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

53.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

54. Executing SIMPLEMAP pass (map simple cells to gate primitives).

55. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFE_NN_
    unmapped dff cell: $_DFFE_NP_
    unmapped dff cell: $_DFFE_PN_
    unmapped dff cell: $_DFFE_PP_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

55.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\CPU':
  mapped 179 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

56. Printing statistics.

=== CPU ===

   Number of wires:                751
   Number of wire bits:            972
   Number of public wires:          31
   Number of public wire bits:     235
   Number of ports:                  6
   Number of port bits:             36
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                943
     $_ANDNOT_                     231
     $_AND_                          4
     $_MUX_                        240
     $_NAND_                        15
     $_NOR_                         18
     $_NOT_                         71
     $_ORNOT_                       35
     $_OR_                         104
     $_XNOR_                         3
     $_XOR_                         43
     sky130_fd_sc_hd__dfxtp_2      179

[INFO]: USING STRATEGY AREA 3

57. Executing ABC pass (technology mapping using ABC).

57.1. Extracting gate netlist of module `\CPU' to `/tmp/yosys-abc-2uvTMc/input.blif'..
Extracted 764 gates and 962 wires to a netlist network with 197 inputs and 196 outputs.

57.1.1. Executing ABC.
Running ABC command: "/home/seaky/chip_design/OpenROAD-flow-scripts/tools/install/yosys/bin/yosys-abc" -s -f /tmp/yosys-abc-2uvTMc/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-2uvTMc/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-2uvTMc/input.blif 
ABC: + read_lib -w /home/seaky/chip_design/OpenLane/designs/CPU_16bit/runs/CPU/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.02 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/home/seaky/chip_design/OpenLane/designs/CPU_16bit/runs/CPU/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.04 sec
ABC: Memory =    9.54 MB. Time =     0.04 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /home/seaky/chip_design/OpenLane/designs/CPU_16bit/runs/CPU/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /home/seaky/chip_design/OpenLane/designs/CPU_16bit/runs/CPU/tmp/synthesis/synthesis.sdc 
ABC: + strash 
ABC: + dch 
ABC: + map -B 0.9 
ABC: The cell delays are multiplied by the factor: <num_fanins> ^ (0.90).
ABC: + topo 
ABC: + stime -c 
ABC: WireLoad = "Small"  Gates =    776 ( 11.2 %)   Cap = 14.0 ff (  1.4 %)   Area =     6185.93 ( 88.8 %)   Delay =  3965.84 ps  ( 19.7 %)               
ABC: + buffer -c -N 10 
ABC: + upsize -c 
ABC: + dnsize -c 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    970 ( 29.0 %)   Cap = 12.0 ff (  8.1 %)   Area =     7259.46 ( 68.5 %)   Delay =  2701.80 ps  ( 37.3 %)               
ABC: Path  0 --       3 : 0    6 pi                        A =   0.00  Df = 117.1  -64.0 ps  S = 171.6 ps  Cin =  0.0 ff  Cout =  36.5 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     424 : 1    2 sky130_fd_sc_hd__inv_4    A =   6.26  Df = 172.9  -46.0 ps  S =  51.5 ps  Cin =  9.0 ff  Cout =  14.3 ff  Cmax = 563.1 ff  G =  151  
ABC: Path  2 --     426 : 3    4 sky130_fd_sc_hd__a21oi_4  A =  16.27  Df = 405.0 -191.4 ps  S = 225.4 ps  Cin =  8.8 ff  Cout =  25.6 ff  Cmax = 221.6 ff  G =  277  
ABC: Path  3 --     465 : 1    2 sky130_fd_sc_hd__bufinv_8 A =  17.52  Df = 627.1 -228.4 ps  S =  30.1 ps  Cin =  2.3 ff  Cout =   7.1 ff  Cmax = 942.1 ff  G =  290  
ABC: Path  4 --     466 : 3    2 sky130_fd_sc_hd__o21bai_4 A =  18.77  Df = 813.4  -91.2 ps  S = 192.5 ps  Cin =  6.6 ff  Cout =  21.9 ff  Cmax = 245.4 ff  G =  323  
ABC: Path  5 --     467 : 2    9 sky130_fd_sc_hd__nand2_8  A =  20.02  Df = 917.2  -69.3 ps  S =  91.1 ps  Cin = 17.1 ff  Cout =  40.0 ff  Cmax = 933.8 ff  G =  224  
ABC: Path  6 --     468 : 1   10 sky130_fd_sc_hd__buf_8    A =  15.01  Df =1045.6  -49.9 ps  S =  64.5 ps  Cin =  7.0 ff  Cout =  32.0 ff  Cmax =5000.0 ff  G =  431  
ABC: Path  7 --     522 : 2    1 sky130_fd_sc_hd__nand2_2  A =   6.26  Df =1097.9  -15.7 ps  S =  45.0 ps  Cin =  4.4 ff  Cout =   4.6 ff  Cmax = 295.7 ff  G =   99  
ABC: Path  8 --     526 : 2    1 sky130_fd_sc_hd__nor2_2   A =   6.26  Df =1197.3  -61.5 ps  S =  80.7 ps  Cin =  4.4 ff  Cout =   4.6 ff  Cmax = 141.9 ff  G =   99  
ABC: Path  9 --     527 : 2    1 sky130_fd_sc_hd__nand2_2  A =   6.26  Df =1253.6  -53.2 ps  S =  44.8 ps  Cin =  4.4 ff  Cout =   4.6 ff  Cmax = 295.7 ff  G =  100  
ABC: Path 10 --     529 : 2    1 sky130_fd_sc_hd__nand2_2  A =   6.26  Df =1318.5  -65.0 ps  S =  65.4 ps  Cin =  4.4 ff  Cout =   8.8 ff  Cmax = 295.7 ff  G =  192  
ABC: Path 11 --     531 : 2    3 sky130_fd_sc_hd__nand2_4  A =  11.26  Df =1380.4  -27.1 ps  S =  75.8 ps  Cin =  8.7 ff  Cout =  17.6 ff  Cmax = 530.1 ff  G =  198  
ABC: Path 12 --     533 : 2    3 sky130_fd_sc_hd__nand2_4  A =  11.26  Df =1453.2  -41.8 ps  S =  65.3 ps  Cin =  8.7 ff  Cout =  13.8 ff  Cmax = 530.1 ff  G =  153  
ABC: Path 13 --    1116 : 2    1 sky130_fd_sc_hd__nand2_2  A =   6.26  Df =1512.9  -32.7 ps  S =  69.9 ps  Cin =  4.4 ff  Cout =   8.8 ff  Cmax = 295.7 ff  G =  195  
ABC: Path 14 --    1118 : 3    3 sky130_fd_sc_hd__nand3_4  A =  17.52  Df =1591.8  -36.0 ps  S =  81.6 ps  Cin =  8.7 ff  Cout =  13.9 ff  Cmax = 469.7 ff  G =  153  
ABC: Path 15 --    1152 : 1    1 sky130_fd_sc_hd__inv_2    A =   3.75  Df =1638.0  -12.5 ps  S =  51.2 ps  Cin =  4.5 ff  Cout =   8.9 ff  Cmax = 331.4 ff  G =  192  
ABC: Path 16 --    1153 : 3    1 sky130_fd_sc_hd__a21boi_4 A =  18.77  Df =1772.4  -96.5 ps  S = 124.2 ps  Cin =  6.8 ff  Cout =   9.3 ff  Cmax = 215.2 ff  G =  130  
ABC: Path 17 --    1154 : 2    4 sky130_fd_sc_hd__nand2_4  A =  11.26  Df =1923.9  -72.5 ps  S =  71.8 ps  Cin =  8.7 ff  Cout =  17.3 ff  Cmax = 530.1 ff  G =  192  
ABC: Path 18 --    1213 : 2    1 sky130_fd_sc_hd__nand2_4  A =  11.26  Df =1972.8  -61.2 ps  S =  48.6 ps  Cin =  8.7 ff  Cout =   8.8 ff  Cmax = 530.1 ff  G =   98  
ABC: Path 19 --    1218 : 2    4 sky130_fd_sc_hd__nand2_4  A =  11.26  Df =2038.1  -75.5 ps  S =  63.5 ps  Cin =  8.7 ff  Cout =  14.1 ff  Cmax = 530.1 ff  G =  156  
ABC: Path 20 --    1219 : 2    1 sky130_fd_sc_hd__or2_4    A =   8.76  Df =2179.6  -39.2 ps  S =  42.3 ps  Cin =  2.4 ff  Cout =   2.4 ff  Cmax = 514.5 ff  G =   97  
ABC: Path 21 --    1221 : 2    1 sky130_fd_sc_hd__and2_4   A =   8.76  Df =2304.6  -53.5 ps  S =  29.4 ps  Cin =  2.4 ff  Cout =   2.0 ff  Cmax = 539.3 ff  G =   79  
ABC: Path 22 --    1222 : 3    1 sky130_fd_sc_hd__mux2_2   A =  11.26  Df =2561.4 -171.8 ps  S =  54.5 ps  Cin =  2.3 ff  Cout =   4.9 ff  Cmax = 297.6 ff  G =  203  
ABC: Path 23 --    1223 : 1    1 sky130_fd_sc_hd__buf_6    A =  11.26  Df =2701.8 -186.2 ps  S =  77.4 ps  Cin =  4.6 ff  Cout =  33.4 ff  Cmax = 785.5 ff  G =  723  
ABC: Start-point = pi2 (\Control_unit_module.state [1]).  End-point = po164 ($auto$rtlil.cc:2985:MuxGate$3280).
ABC: + print_stats -m 
ABC: netlist                       : i/o =  197/  196  lat =    0  nd =   970  edge =   2042  area =7259.76  delay =1797.21  lev = 34
ABC: + write_blif /tmp/yosys-abc-2uvTMc/output.blif 

57.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21boi_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__a21oi_4 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a221oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and2_4 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__and3_4 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:      169
ABC RESULTS:   sky130_fd_sc_hd__buf_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__buf_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__buf_6 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__buf_8 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__bufinv_8 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       80
ABC RESULTS:   sky130_fd_sc_hd__inv_4 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:      159
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:      222
ABC RESULTS:   sky130_fd_sc_hd__nand2_4 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__nand2_8 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:       86
ABC RESULTS:   sky130_fd_sc_hd__nand3_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       47
ABC RESULTS:   sky130_fd_sc_hd__nor2_4 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__nor2_8 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:       21
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       25
ABC RESULTS:   sky130_fd_sc_hd__o21ai_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21bai_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2bb2ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__or2_4 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or4_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        6
ABC RESULTS:        internal signals:      569
ABC RESULTS:           input signals:      197
ABC RESULTS:          output signals:      196
Removing temp directory.

58. Executing SETUNDEF pass (replace undef values with defined constants).

59. Executing HILOMAP pass (mapping to constant drivers).

60. Executing SPLITNETS pass (splitting up multi-bit signals).

61. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CPU..
Removed 8 unused cells and 979 unused wires.
<suppressed ~37 debug messages>

62. Executing INSBUF pass (insert buffer cells for connected wires).

63. Executing CHECK pass (checking for obvious problems).
Checking module CPU...
Found and reported 0 problems.

64. Printing statistics.

=== CPU ===

   Number of wires:               1138
   Number of wire bits:           1168
   Number of public wires:         177
   Number of public wire bits:     207
   Number of ports:                  6
   Number of port bits:             36
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1149
     sky130_fd_sc_hd__a211oi_2       2
     sky130_fd_sc_hd__a21boi_4       1
     sky130_fd_sc_hd__a21o_2        12
     sky130_fd_sc_hd__a21oi_2       13
     sky130_fd_sc_hd__a21oi_4        2
     sky130_fd_sc_hd__a221o_2        1
     sky130_fd_sc_hd__a221oi_2       1
     sky130_fd_sc_hd__a22o_2         5
     sky130_fd_sc_hd__a31o_2         1
     sky130_fd_sc_hd__and2_2         4
     sky130_fd_sc_hd__and2_4         2
     sky130_fd_sc_hd__and3_2         9
     sky130_fd_sc_hd__and3_4         2
     sky130_fd_sc_hd__and4_2         1
     sky130_fd_sc_hd__buf_1        169
     sky130_fd_sc_hd__buf_2         11
     sky130_fd_sc_hd__buf_4          1
     sky130_fd_sc_hd__buf_6         12
     sky130_fd_sc_hd__buf_8          1
     sky130_fd_sc_hd__bufinv_8       1
     sky130_fd_sc_hd__dfxtp_2      179
     sky130_fd_sc_hd__inv_2         80
     sky130_fd_sc_hd__inv_4          6
     sky130_fd_sc_hd__mux2_2       159
     sky130_fd_sc_hd__nand2_2      222
     sky130_fd_sc_hd__nand2_4       16
     sky130_fd_sc_hd__nand2_8        1
     sky130_fd_sc_hd__nand3_2       86
     sky130_fd_sc_hd__nand3_4        1
     sky130_fd_sc_hd__nand3b_2       7
     sky130_fd_sc_hd__nor2_2        47
     sky130_fd_sc_hd__nor2_4         5
     sky130_fd_sc_hd__nor2_8         1
     sky130_fd_sc_hd__nor3_2         4
     sky130_fd_sc_hd__o211a_2        1
     sky130_fd_sc_hd__o211ai_2       1
     sky130_fd_sc_hd__o21a_2        21
     sky130_fd_sc_hd__o21ai_2       25
     sky130_fd_sc_hd__o21ai_4        1
     sky130_fd_sc_hd__o21bai_4       1
     sky130_fd_sc_hd__o221a_2        1
     sky130_fd_sc_hd__o22ai_2        1
     sky130_fd_sc_hd__o2bb2ai_2      1
     sky130_fd_sc_hd__o31ai_2        1
     sky130_fd_sc_hd__or2_2         19
     sky130_fd_sc_hd__or2_4          3
     sky130_fd_sc_hd__or4_4          1
     sky130_fd_sc_hd__xnor2_2        1
     sky130_fd_sc_hd__xor2_2         6

   Chip area for module '\CPU': 11066.864000
     of which used for sequential elements: 3807.401600 (34.40%)

65. Executing Verilog backend.
Dumping module `\CPU'.

66. Executing JSON backend.

End of script. Logfile hash: c3a57428da, CPU: user 0.47s system 0.03s, MEM: 44.93 MB peak
Yosys 0.50 (git sha1 b5170e139, clang++ 14.0.0-1ubuntu1.1 -fPIC -O3)
Time spent: 52% 2x abc (0 sec), 10% 2x read_liberty (0 sec), ...
